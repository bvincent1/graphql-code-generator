// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`graphql-hooks fetcher: custom-mapper Should generate mutation correctly with lazy variables 1`] = `
"
export const TestDocument = \`
    query test {
  feed {
    id
    commentCount
    repository {
      full_name
      html_url
      owner {
        avatar_url
      }
    }
  }
}
    \`;
export const useTestQuery = <
      TData = TTestQuery,
      TError = unknown
    >(
      variables?: TTestQueryVariables, 
      options?: UseQueryOptions<TTestQuery, TError, TData>
    ) => 
    useQuery<TTestQuery, TError, TData>(
      ['test', variables],
      useCustomFetcher<TTestQuery, TTestQueryVariables>(TestDocument).bind(null, variables),
      options
    );
export const TestDocument = \`
    mutation test($name: String) {
  submitRepository(repoFullName: $name) {
    id
  }
}
    \`;
export const useTestMutation = <
      TError = unknown,
      TContext = unknown
    >(options?: UseMutationOptions<TTestMutation, TError, TTestMutationVariables, TContext>) => 
    useMutation<TTestMutation, TError, TTestMutationVariables, TContext>(
      useCustomFetcher<TTestMutation, TTestMutationVariables>(TestDocument),
      options
    );"
`;

exports[`graphql-hooks fetcher: custom-mapper Should generate query correctly with external mapper 1`] = `
"
export const TestDocument = \`
    query test {
  feed {
    id
    commentCount
    repository {
      full_name
      html_url
      owner {
        avatar_url
      }
    }
  }
}
    \`;
export const useTestQuery = <
      TData = TTestQuery,
      TError = unknown
    >(
      variables?: TTestQueryVariables, 
      options?: UseQueryOptions<TTestQuery, TError, TData>
    ) => 
    useQuery<TTestQuery, TError, TData>(
      ['test', variables],
      myCustomFetcher<TTestQuery, TTestQueryVariables>(TestDocument, variables),
      options
    );
export const TestDocument = \`
    mutation test($name: String) {
  submitRepository(repoFullName: $name) {
    id
  }
}
    \`;
export const useTestMutation = <
      TError = unknown,
      TContext = unknown
    >(options?: UseMutationOptions<TTestMutation, TError, TTestMutationVariables, TContext>) => 
    useMutation<TTestMutation, TError, TTestMutationVariables, TContext>(
      (variables?: TTestMutationVariables) => myCustomFetcher<TTestMutation, TTestMutationVariables>(TestDocument, variables)(),
      options
    );"
`;

exports[`graphql-hooks fetcher: custom-mapper Should generate query correctly with internal mapper 1`] = `
"
export const TestDocument = \`
    query test {
  feed {
    id
    commentCount
    repository {
      full_name
      html_url
      owner {
        avatar_url
      }
    }
  }
}
    \`;
export const useTestQuery = <
      TData = TTestQuery,
      TError = unknown
    >(
      variables?: TTestQueryVariables, 
      options?: UseQueryOptions<TTestQuery, TError, TData>
    ) => 
    useQuery<TTestQuery, TError, TData>(
      ['test', variables],
      myCustomFetcher<TTestQuery, TTestQueryVariables>(TestDocument, variables),
      options
    );
export const TestDocument = \`
    mutation test($name: String) {
  submitRepository(repoFullName: $name) {
    id
  }
}
    \`;
export const useTestMutation = <
      TError = unknown,
      TContext = unknown
    >(options?: UseMutationOptions<TTestMutation, TError, TTestMutationVariables, TContext>) => 
    useMutation<TTestMutation, TError, TTestMutationVariables, TContext>(
      (variables?: TTestMutationVariables) => myCustomFetcher<TTestMutation, TTestMutationVariables>(TestDocument, variables)(),
      options
    );"
`;

exports[`graphql-hooks fetcher: fetch Should generate query and mutation correctly 1`] = `
"
export const TestDocument = \`
    query test {
  feed {
    id
    commentCount
    repository {
      full_name
      html_url
      owner {
        avatar_url
      }
    }
  }
}
    \`;
export const useTestQuery: UseQueryResult<TypedQuery<TestQuery>, TTestQueryVariables> = (
      options?: UseQueryOptions<TTestQueryVariables>
    ) => 
    useQuery(
      TestDocument,
      options
    );
export const TestDocument = \`
    mutation test($name: String) {
  submitRepository(repoFullName: $name) {
    id
  }
}
    \`;
export const useTestMutation: [
      FetchData<TypedQuery<TestMutation>, TTestMutationVariables>,
      UseClientRequestResult<TypedQuery<TestMutation>>,
      ResetFunction
    ] = (
      options?: UseClientRequestOptions<TTestMutationVariables>
    ) => 
    useMutation(
      TestDocument,
      options
    );"
`;

exports[`graphql-hooks fetcher: graphql-request Should generate query correctly with client 1`] = `
"
export const TestDocument = \`
    query test {
  feed {
    id
    commentCount
    repository {
      full_name
      html_url
      owner {
        avatar_url
      }
    }
  }
}
    \`;
export const useTestQuery = <
      TData = TTestQuery,
      TError = unknown
    >(
      client: GraphQLClient, 
      variables?: TTestQueryVariables, 
      options?: UseQueryOptions<TTestQuery, TError, TData>
    ) => 
    useQuery<TTestQuery, TError, TData>(
      ['test', variables],
      fetcher<TTestQuery, TTestQueryVariables>(client, TestDocument, variables),
      options
    );
export const TestDocument = \`
    mutation test($name: String) {
  submitRepository(repoFullName: $name) {
    id
  }
}
    \`;
export const useTestMutation = <
      TError = unknown,
      TContext = unknown
    >(
      client: GraphQLClient, 
      options?: UseMutationOptions<TTestMutation, TError, TTestMutationVariables, TContext>
    ) => 
    useMutation<TTestMutation, TError, TTestMutationVariables, TContext>(
      (variables?: TTestMutationVariables) => fetcher<TTestMutation, TTestMutationVariables>(client, TestDocument, variables)(),
      options
    );"
`;

exports[`graphql-hooks fetcher: hardcoded-fetch Should generate query correctly with fetch config 1`] = `
"
export const TestDocument = \`
    query test {
  feed {
    id
    commentCount
    repository {
      full_name
      html_url
      owner {
        avatar_url
      }
    }
  }
}
    \`;
export const useTestQuery = <
      TData = TTestQuery,
      TError = unknown
    >(
      variables?: TTestQueryVariables, 
      options?: UseQueryOptions<TTestQuery, TError, TData>
    ) => 
    useQuery<TTestQuery, TError, TData>(
      ['test', variables],
      fetcher<TTestQuery, TTestQueryVariables>(TestDocument, variables),
      options
    );
export const TestDocument = \`
    mutation test($name: String) {
  submitRepository(repoFullName: $name) {
    id
  }
}
    \`;
export const useTestMutation = <
      TError = unknown,
      TContext = unknown
    >(options?: UseMutationOptions<TTestMutation, TError, TTestMutationVariables, TContext>) => 
    useMutation<TTestMutation, TError, TTestMutationVariables, TContext>(
      (variables?: TTestMutationVariables) => fetcher<TTestMutation, TTestMutationVariables>(TestDocument, variables)(),
      options
    );"
`;

exports[`graphql-hooks fetcher: hardcoded-fetch Should generate query correctly with hardcoded endpoint 1`] = `
"
export const TestDocument = \`
    query test {
  feed {
    id
    commentCount
    repository {
      full_name
      html_url
      owner {
        avatar_url
      }
    }
  }
}
    \`;
export const useTestQuery = <
      TData = TTestQuery,
      TError = unknown
    >(
      variables?: TTestQueryVariables, 
      options?: UseQueryOptions<TTestQuery, TError, TData>
    ) => 
    useQuery<TTestQuery, TError, TData>(
      ['test', variables],
      fetcher<TTestQuery, TTestQueryVariables>(TestDocument, variables),
      options
    );
export const TestDocument = \`
    mutation test($name: String) {
  submitRepository(repoFullName: $name) {
    id
  }
}
    \`;
export const useTestMutation = <
      TError = unknown,
      TContext = unknown
    >(options?: UseMutationOptions<TTestMutation, TError, TTestMutationVariables, TContext>) => 
    useMutation<TTestMutation, TError, TTestMutationVariables, TContext>(
      (variables?: TTestMutationVariables) => fetcher<TTestMutation, TTestMutationVariables>(TestDocument, variables)(),
      options
    );"
`;

exports[`graphql-hooks fetcher: hardcoded-fetch Should generate query correctly with hardcoded endpoint from env var 1`] = `
"
export const TestDocument = \`
    query test {
  feed {
    id
    commentCount
    repository {
      full_name
      html_url
      owner {
        avatar_url
      }
    }
  }
}
    \`;
export const useTestQuery = <
      TData = TTestQuery,
      TError = unknown
    >(
      variables?: TTestQueryVariables, 
      options?: UseQueryOptions<TTestQuery, TError, TData>
    ) => 
    useQuery<TTestQuery, TError, TData>(
      ['test', variables],
      fetcher<TTestQuery, TTestQueryVariables>(TestDocument, variables),
      options
    );
export const TestDocument = \`
    mutation test($name: String) {
  submitRepository(repoFullName: $name) {
    id
  }
}
    \`;
export const useTestMutation = <
      TError = unknown,
      TContext = unknown
    >(options?: UseMutationOptions<TTestMutation, TError, TTestMutationVariables, TContext>) => 
    useMutation<TTestMutation, TError, TTestMutationVariables, TContext>(
      (variables?: TTestMutationVariables) => fetcher<TTestMutation, TTestMutationVariables>(TestDocument, variables)(),
      options
    );"
`;

exports[`graphql-hooks fetcher: hardcoded-fetch Should generate query correctly with hardcoded endpoint from just identifier 1`] = `
"
export const TestDocument = \`
    query test {
  feed {
    id
    commentCount
    repository {
      full_name
      html_url
      owner {
        avatar_url
      }
    }
  }
}
    \`;
export const useTestQuery = <
      TData = TTestQuery,
      TError = unknown
    >(
      variables?: TTestQueryVariables, 
      options?: UseQueryOptions<TTestQuery, TError, TData>
    ) => 
    useQuery<TTestQuery, TError, TData>(
      ['test', variables],
      fetcher<TTestQuery, TTestQueryVariables>(TestDocument, variables),
      options
    );
export const TestDocument = \`
    mutation test($name: String) {
  submitRepository(repoFullName: $name) {
    id
  }
}
    \`;
export const useTestMutation = <
      TError = unknown,
      TContext = unknown
    >(options?: UseMutationOptions<TTestMutation, TError, TTestMutationVariables, TContext>) => 
    useMutation<TTestMutation, TError, TTestMutationVariables, TContext>(
      (variables?: TTestMutationVariables) => fetcher<TTestMutation, TTestMutationVariables>(TestDocument, variables)(),
      options
    );"
`;
